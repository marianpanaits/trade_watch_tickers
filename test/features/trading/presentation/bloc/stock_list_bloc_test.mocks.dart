// Mocks generated by Mockito 5.4.4 from annotations
// in trade_watch_tickers/test/features/trading/presentation/bloc/stock_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trade_watch_tickers/core/error/failures.dart' as _i6;
import 'package:trade_watch_tickers/core/usecases/usecase.dart' as _i8;
import 'package:trade_watch_tickers/features/trading/domain/entities/stock.dart'
    as _i7;
import 'package:trade_watch_tickers/features/trading/domain/entities/stock_price.dart'
    as _i10;
import 'package:trade_watch_tickers/features/trading/domain/repositories/stock_repository.dart'
    as _i2;
import 'package:trade_watch_tickers/features/trading/domain/usecases/get_stock_list.dart'
    as _i4;
import 'package:trade_watch_tickers/features/trading/domain/usecases/get_stock_price.dart'
    as _i9;
import 'package:trade_watch_tickers/features/trading/domain/usecases/subscribe_to_stock_updates.dart'
    as _i11;
import 'package:trade_watch_tickers/features/trading/domain/usecases/subscribe_to_symbol.dart'
    as _i12;
import 'package:trade_watch_tickers/features/trading/domain/usecases/unsubscribe_from_symbol.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStockRepository_0 extends _i1.SmartFake
    implements _i2.StockRepository {
  _FakeStockRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetStockList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetStockList extends _i1.Mock implements _i4.GetStockList {
  MockGetStockList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeStockRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.StockRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Stock>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Stock>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Stock>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Stock>>>);
}

/// A class which mocks [GetStockPrice].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetStockPrice extends _i1.Mock implements _i9.GetStockPrice {
  MockGetStockPrice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeStockRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.StockRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.StockPrice>> call(String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [symbol],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i10.StockPrice>>.value(
            _FakeEither_1<_i6.Failure, _i10.StockPrice>(
          this,
          Invocation.method(
            #call,
            [symbol],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.StockPrice>>);
}

/// A class which mocks [SubscribeToStockUpdates].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscribeToStockUpdates extends _i1.Mock
    implements _i11.SubscribeToStockUpdates {
  MockSubscribeToStockUpdates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeStockRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.StockRepository);

  @override
  _i5.Stream<_i7.Stock> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Stream<_i7.Stock>.empty(),
      ) as _i5.Stream<_i7.Stock>);
}

/// A class which mocks [SubscribeToSymbol].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscribeToSymbol extends _i1.Mock implements _i12.SubscribeToSymbol {
  MockSubscribeToSymbol() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeStockRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.StockRepository);

  @override
  _i5.Future<void> call(String? symbol) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [symbol],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [UnsubscribeFromSymbol].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnsubscribeFromSymbol extends _i1.Mock
    implements _i13.UnsubscribeFromSymbol {
  MockUnsubscribeFromSymbol() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeStockRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.StockRepository);

  @override
  _i5.Future<void> call(String? symbol) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [symbol],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
