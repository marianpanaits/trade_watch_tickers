// Mocks generated by Mockito 5.4.4 from annotations
// in trade_watch_tickers/test/features/trading/data/repositories/stock_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trade_watch_tickers/features/trading/data/datasources/stock_remote_data_source.dart'
    as _i4;
import 'package:trade_watch_tickers/features/trading/data/datasources/stock_websocket_data_source.dart'
    as _i7;
import 'package:trade_watch_tickers/features/trading/data/models/stock_model.dart'
    as _i6;
import 'package:trade_watch_tickers/features/trading/data/models/stock_price_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStockPriceModel_1 extends _i1.SmartFake
    implements _i3.StockPriceModel {
  _FakeStockPriceModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StockRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockRemoteDataSource extends _i1.Mock
    implements _i4.StockRemoteDataSource {
  MockStockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i5.Future<List<_i6.StockModel>> getStockList() => (super.noSuchMethod(
        Invocation.method(
          #getStockList,
          [],
        ),
        returnValue: _i5.Future<List<_i6.StockModel>>.value(<_i6.StockModel>[]),
      ) as _i5.Future<List<_i6.StockModel>>);

  @override
  _i5.Future<_i3.StockPriceModel> getStockPrice(String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockPrice,
          [symbol],
        ),
        returnValue:
            _i5.Future<_i3.StockPriceModel>.value(_FakeStockPriceModel_1(
          this,
          Invocation.method(
            #getStockPrice,
            [symbol],
          ),
        )),
      ) as _i5.Future<_i3.StockPriceModel>);
}

/// A class which mocks [StockWebsocketDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockWebsocketDataSource extends _i1.Mock
    implements _i7.StockWebsocketDataSource {
  MockStockWebsocketDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i6.StockModel> get updates => (super.noSuchMethod(
        Invocation.getter(#updates),
        returnValue: _i5.Stream<_i6.StockModel>.empty(),
      ) as _i5.Stream<_i6.StockModel>);

  @override
  void subscribeToSymbol(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbol,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unsubscribeFromSymbol(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromSymbol,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
